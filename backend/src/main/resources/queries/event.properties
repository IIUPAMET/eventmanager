event.getById=\
  SELECT \"Event\".id AS id, \"Event\".creator_id AS creator_id, \"Event\".name AS name, \
  start_time, end_time, "Event".description AS description,\
  \"Event_Visibility\".name AS visibility \
  FROM \"Event\" INNER JOIN \"Event_Visibility\" \
  ON \"Event\".visibility = \"Event_Visibility\".id \
  WHERE \"Event\".id  = CAST(? AS UUID) \
  AND start_time IS NOT NULL \
  AND end_time IS NOT NULL
event.getAdditionById=\
  SELECT \"Customer_Event_Priority\".name as priority, \
  \"Customer_Event\".start_date_notification as startTimeNotification \
  FROM (\"Event\" INNER JOIN \"Customer_Event\" \
  ON \"Event\".id = \"Customer_Event\".event_id) INNER JOIN \"Customer_Event_Priority\" \
  ON \"Customer_Event\".priority = \"Customer_Event_Priority\".id \
  WHERE \"Event\".id  = CAST(? AS UUID) \
  AND \"Customer_Event\".customer_id  = CAST(? AS UUID) \
  AND start_time IS NOT NULL \
  AND end_time IS NOT NULL
event.getPriorityByCustId=\
  SELECT \"Customer_Event_Priority\".name as priority, \"Event\".id as eventId \
  FROM ((\"Event\" \
           INNER JOIN \"Customer_Event\" \
              ON \"Event\".id = \"Customer_Event\".event_id) \
           INNER JOIN \"Customer_Event_Priority\" \
              ON \"Customer_Event\".priority = \"Customer_Event_Priority\".id) \
           INNER JOIN \"Event_Status\" \
              ON \"Event\".status = \"Event_Status\".id \
  WHERE \"Customer_Event\".customer_id = CAST(? AS UUID) \
  AND (\"Event\".end_time >= LOCALTIMESTAMP) \
  AND \"Event_Status\".name = 'EVENT' \
  AND start_time IS NOT NULL \
  AND end_time IS NOT NULL
event.getParticipants=\
  SELECT \"Customer\".login as login \
  FROM (\"Event\" \
          INNER JOIN \"Customer_Event\" \
             ON \"Event\".id = \"Customer_Event\".event_id) \
          INNER JOIN \"Customer\" \
             ON \"Customer_Event\".customer_id = \"Customer\".id \
  WHERE \"Event\".id = cast(? as uuid) \
  AND \"Customer\".id <> \"Event\".creator_id \
  AND \"Customer_Event\".status = (SELECT id \
                                   FROM \"Customer_Event_Status\" \
                                   WHERE name = 'ACCEPTED')
event.updateById=\
  UPDATE \"Event\" \
  SET name=?, description=?, start_time=?, end_time=? \
  WHERE id = CAST(? AS UUID)
event.createWithoutTime=\
  INSERT INTO \"Event\" \
  (id,name,group_id,folder_id,creator_id,start_time,end_time,visibility,description,status) \
  VALUES(?,?, ?, NULL, CAST(? AS UUID),?,?,?,?,?)
event.create=\
  INSERT INTO \"Event\" \
  (id,name,group_id,folder_id,creator_id,start_time,end_time,visibility,description,status) \
  VALUES(?,?, ?, NULL, CAST(? AS UUID),(? + ?::INTERVAL), \
  (? + ?::INTERVAL),?,?,?)
event.deleteById=\
  UPDATE \"Event\" SET status = (SELECT id FROM \"Event_Status\" WHERE name = 'DELETED') \
  WHERE id = CAST (? AS UUID)
event.delete=\
  DELETE FROM \"Event\" WHERE id = CAST (? AS UUID)
event.getStatusId=\
  SELECT id FROM \"Event_Status\" WHERE name = ?
event.getVisibilityId=\
  SELECT id FROM \"Event_Visibility\" WHERE name = ?
event.getProirityId=\
  SELECT id FROM \"Customer_Event_Priority\" WHERE name = ?
event.getByCustIdSort=\
  with one as(SELECT \"Event\".id AS id, creator_id, \"Event\".name AS name, start_time, end_time, \"Event\".description AS description, \
                 \"Event_Visibility\".name AS visibility, \"Event_Status\".name AS status \
              FROM ((\"Event\" \
                INNER JOIN "Event_Visibility" \
                 ON \"Event\".visibility = "Event_Visibility".id) \
                INNER JOIN \"Event_Status\" \
                 ON \"Event\".status = "Event_Status".id) \
              WHERE creator_id = CAST(? AS UUID) \
                    AND (\"Event\".end_time >= LOCALTIMESTAMP) \
                    AND \"Event_Status\".name = 'EVENT') \
  select * from one UNION (SELECT \"Event\".id AS id, creator_id, \"Event\".name AS name, start_time, end_time, \
                             \"Event\".description AS description, \
                             \"Event_Visibility\".name AS visibility, \"Event_Status\".name AS status \
                           FROM (((\"Event\" \
                             INNER JOIN \"Event_Status\" \
                               ON status = \"Event_Status\".id) \
                             INNER JOIN \"Customer_Event\" \
                               ON \"Event\".id = \"Customer_Event\".event_id) \
                             INNER JOIN \"Event_Visibility\" \
                               ON \"Event\".visibility = \"Event_Visibility\".id) \
                           WHERE \"Event_Status\".name = 'EVENT' \
                                  AND \"Customer_Event\".status = (SELECT id \
                                                                   FROM \"Customer_Event_Status\" \
                                                                   WHERE name = 'ACCEPTED') \
                                  AND \"Customer_Event\".customer_id = CAST(? AS UUID) \
                                  AND (\"Event\".end_time >= LOCALTIMESTAMP))
event.getByCustIdFilterByType=\
  with one as(SELECT \"Event\".id AS id, \"Event\".name AS name, start_time, end_time, \"Event\".description AS description, \
                 \"Event_Visibility\".name AS visibility, \"Event_Status\".name AS status \
              FROM ((\"Event\" \
                INNER JOIN "Event_Visibility" \
                 ON \"Event\".visibility = "Event_Visibility".id) \
                INNER JOIN \"Event_Status\" \
                 ON \"Event\".status = "Event_Status".id) \
              WHERE creator_id = CAST(? AS UUID) \
                    AND \"Event_Status\".name = 'EVENT' \
                    AND (\"Event\".end_time >= LOCALTIMESTAMP)\
                    AND "Event_Visibility".name = ?) \
  select * from one UNION (SELECT \"Event\".id AS id,\"Event\".name AS name, start_time, end_time, \
                             \"Event\".description AS description, \
                             \"Event_Visibility\".name AS visibility, \"Event_Status\".name AS status \
                           FROM (((\"Event\" \
                             INNER JOIN \"Event_Status\" \
                               ON status = \"Event_Status\".id) \
                             INNER JOIN \"Customer_Event\" \
                               ON \"Event\".id = \"Customer_Event\".event_id) \
                             INNER JOIN \"Event_Visibility\" \
                               ON \"Event\".visibility = \"Event_Visibility\".id) \
                           WHERE \"Event_Status\".name = 'EVENT' \
                                  AND \"Customer_Event\".status = (SELECT id \
                                                                   FROM \"Customer_Event_Status\" \
                                                                   WHERE name = 'ACCEPTED') \
                                  AND \"Customer_Event\".customer_id = CAST(? AS UUID) \
                                  AND (\"Event\".end_time >= LOCALTIMESTAMP) \
                                  AND "Event_Visibility".name = ?) \
  ORDER BY start_time
event.createInvitation=\
  INSERT INTO \"Customer_Event\"(id, customer_id, event_id, status, priority) \
  VALUES (uuid_generate_v1(),(SELECT id FROM \"Customer\" WHERE login = ?), cast(? AS UUID), \
  (SELECT id FROM \"Customer_Event_Status\" WHERE name = 'SENT'), \
  (SELECT id FROM \"Customer_Event_Priority\" WHERE name = 'LOW'))
event.getTimeToStart=\
  SELECT (start_time - localtimestamp) FROM \"Event\" WHERE id = CAST(? AS UUID)
event.getInvitesByCustId=\
  SELECT \"Event\".id AS id,\"Event\".name AS name,\"Event\".description AS description, \
  \"Event_Status\".name AS status \
  FROM (\"Event\" INNER JOIN \"Event_Status\" ON status = \"Event_Status\".id) \
  INNER JOIN \"Customer_Event\" ON \"Event\".id = \"Customer_Event\".event_id \
  WHERE \"Event_Status\".name = 'EVENT' \
  AND \"Customer_Event\".status = (SELECT id FROM \"Customer_Event_Status\" WHERE name = 'SENT') \
  AND \"Customer_Event\".customer_id = CAST(? AS UUID)
customer_event.create=\
  INSERT INTO \"Customer_Event\" \
  (id,event_id,customer_id,start_date_notification,frequency_value,priority,status) \
  VALUES(uuid_generate_v1(),?,CAST(? AS UUID),?,1,?,(SELECT id FROM \"Customer_Event_Status\" WHERE name = 'ACCEPTED'))
drafts.getByCustId=\
  SELECT \"Event\".id AS id,\"Event\".name AS name,\"Event\".description AS description, \
  \"Event_Status\".name AS status, \"Event\".start_time as start_time, \"Event\".end_time as end_time, \
  \"Event_Visibility\".name as visibility \
  FROM (\"Event\" INNER JOIN \"Event_Status\" ON status = \"Event_Status\".id) \
  INNER JOIN \"Event_Visibility\" ON \"Event\".visibility = \"Event_Visibility\".id \
  WHERE \"Event_Status\".name = 'DRAFT' \
  AND \"Event\".creator_id = CAST(? AS UUID)
customer_event.updatePriorityByEventId=\
  UPDATE \"Customer_Event\" \
  SET priority = (SELECT id FROM \"Customer_Event_Priority\" WHERE name = ?) \
  WHERE event_id = CAST(? AS UUID)
customer_event.getInvites=\
  SELECT ce.event_id, e.name as "event_name", c.login \
  FROM \"Customer_Event\" ce \
  JOIN \"Event\" e on ce.event_id = e.id \
  JOIN \"Customer\" c on e.creator_id = c.id \
  WHERE ce.customer_id = cast(? as UUID) and ce.status = (select id \
  from "Customer_Event_Status" \
  where name = 'SENT')
customer_event.updateNotifTime=\
  UPDATE \"Customer_Event\" \
  SET start_date_notification=? \
  WHERE event_id = CAST(? AS UUID)
event.public_and_friends=\
  SELECT \
  \"Event\".id              AS id, \
  \"Event\".name            AS name, \
  start_time, \
  end_time, \
  \"Event\".description     AS description, \
  \"Event_Visibility\".name AS visibility, \
  \"Event_Status\".name     AS status \
FROM (\"Event\" \
  INNER JOIN \"Event_Visibility\" \
    ON \"Event\".visibility = \"Event_Visibility\".id) \
  INNER JOIN \"Event_Status\" \
  ON \"Event\".status = \"Event_Status\".id \
WHERE \"Event\".visibility = (SELECT id \
                            FROM \"Event_Visibility\" \
                            WHERE name = 'PUBLIC') \
      AND start_time IS NOT NULL \
      AND end_time IS NOT NULL \
  AND \"Event_Status\".name != 'DELETED' \
  AND \"Event_Status\".name != 'DRAFT' \
  AND (\"Event\".end_time >= LOCALTIMESTAMP)\
\
UNION \
\
SELECT \
  \"Event\".id              AS id, \
  \"Event\".name            AS name, \
  start_time, \
  end_time, \
  \"Event\".description     AS description, \
  \"Event_Visibility\".name AS visibility, \
  \"Event_Status\".name     AS status \
FROM (\"Event\" \
  INNER JOIN \"Event_Visibility\" \
    ON \"Event\".visibility = \"Event_Visibility\".id) \
  INNER JOIN \"Event_Status\" \
  ON \"Event\".status = \"Event_Status\".id \
WHERE \"Event\".visibility = (SELECT id \
                            FROM \"Event_Visibility\" \
                            WHERE name = 'FRIENDS') \
\
       AND (\"isFriends\"(creator_id, cast(? AS UUID)) \
           OR creator_id = cast(? AS UUID)) \
\
      AND start_time IS NOT NULL \
      AND end_time IS NOT NULL \
  AND \"Event_Status\".name != 'DELETED' \
  AND \"Event_Status\".name != 'DRAFT' \
  AND (\"Event\".end_time >= LOCALTIMESTAMP)\
ORDER BY start_time
count.public_and_friends=\
  SELECT count(*) FROM \
  (SELECT \
  \"Event\".id              AS id, \
  \"Event\".name            AS name, \
  start_time, \
  end_time, \
  \"Event\".description     AS description, \
  \"Event_Visibility\".name AS visibility, \
  \"Event_Status\".name     AS status \
FROM (\"Event\" \
  INNER JOIN \"Event_Visibility\" \
    ON \"Event\".visibility = \"Event_Visibility\".id) \
  INNER JOIN \"Event_Status\" \
  ON \"Event\".status = \"Event_Status\".id \
WHERE \"Event\".visibility = (SELECT id \
                            FROM \"Event_Visibility\" \
                            WHERE name = 'PUBLIC') \
      AND start_time IS NOT NULL \
      AND end_time IS NOT NULL \
  AND \"Event_Status\".name != 'DELETED' \
  AND \"Event_Status\".name != 'DRAFT' \
  AND (\"Event\".end_time >= LOCALTIMESTAMP)\
\
UNION \
\
SELECT \
  \"Event\".id              AS id, \
  \"Event\".name            AS name, \
  start_time, \
  end_time, \
  \"Event\".description     AS description, \
  \"Event_Visibility\".name AS visibility, \
  \"Event_Status\".name     AS status \
FROM (\"Event\" \
  INNER JOIN \"Event_Visibility\" \
    ON \"Event\".visibility = \"Event_Visibility\".id) \
  INNER JOIN \"Event_Status\" \
  ON \"Event\".status = \"Event_Status\".id \
WHERE \"Event\".visibility = (SELECT id \
                            FROM \"Event_Visibility\" \
                            WHERE name = 'FRIENDS') \
\
       AND (\"isFriends\"(creator_id, cast(? AS UUID)) \
           OR creator_id = cast(? AS UUID)) \
\
      AND start_time IS NOT NULL \
      AND end_time IS NOT NULL \
  AND \"Event_Status\".name != 'DELETED' \
  AND \"Event_Status\".name != 'DRAFT' \
  AND (\"Event\".end_time >= LOCALTIMESTAMP)\
ORDER BY start_time) AS subquery
customer_event.is_participant=\
  SELECT * \
  FROM \"Customer_Event\" \
  WHERE event_id = cast (? AS UUID) \
  AND customer_id = cast(? AS UUID) \
  AND status = (SELECT id FROM \"Customer_Event_Status\" WHERE name ='ACCEPTED')
customer_event.remove_participant=\
  UPDATE \"Customer_Event\" \
  SET status = (SELECT id from \"Customer_Event_Status\" WHERE name = 'DELETED') \
  WHERE customer_id = cast(? AS UUID) \
  AND event_id = cast(? AS UUID)
customer_event.insert_participant=\
  INSERT INTO \"Customer_Event\" (customer_id, event_id, status, priority, start_date_notification, frequency_value) \
    VALUES (cast(? as uuid), cast(? as uuid),  \
                                  (SELECT id \
                                   FROM \"Customer_Event_Status\" \
                                   WHERE name = 'ACCEPTED'), \
                              (SELECT id \
                               FROM \"Customer_Event_Priority\" \
                               WHERE name = 'LOW'), \
                         (SELECT start_time \
                         FROM \"Event\" \
                         WHERE id = CAST(? AS UUID)),1)
customer_event.update_participant=\
  UPDATE \"Customer_Event\" \
     SET status                    = (SELECT id \
                                   FROM \"Customer_Event_Status\" \
                                   WHERE name = 'ACCEPTED') \
    WHERE customer_id = cast(? as uuid) AND event_id = cast(? as uuid)
customer_event.is_present=\
  select id \
  from "Customer_Event" \
  where customer_id = cast(? as uuid) and event_id = cast(? as uuid)
customer_event.countdown_messages=\
SELECT\
  (SELECT email \
   FROM \"Customer\" \
   WHERE id = ce.customer_id) AS email, \
  event_countdown_message(event_id) AS message \
FROM \"Customer_Event\" ce \
WHERE date_trunc('day', start_date_notification) <= date_trunc('day', now()) AND \
      ce.event_id = (SELECT id \
                     FROM \"Event\" \
                     WHERE \
                       start_time > now() AND \
                       ce.event_id = \"Event\".id) AND \
ce.status = (SELECT id \
FROM \"Customer_Event_Status\" \
WHERE name = 'ACCEPTED')

event.getAllPublicEventsInMonth = \
SELECT \
  \"Event\".id              AS id, \
  \"Event\".name            AS name, \
  start_time, \
  end_time, \
  \"Event\".description     AS description, \
  \"Event_Visibility\".name AS visibility, \
  \"Event_Status\".name     AS status \
FROM (\"Event\" \
  INNER JOIN \"Event_Visibility\" \
    ON \"Event\".visibility = \"Event_Visibility\".id) \
  INNER JOIN \"Event_Status\" \
  ON \"Event\".status = \"Event_Status\".id \
WHERE \"Event\".visibility = (SELECT id \
                            FROM \"Event_Visibility\" \
                            WHERE name = 'PUBLIC') \
      AND start_time IS NOT NULL \
      AND end_time IS NOT NULL \
  AND \"Event_Status\".name != 'DELETED' \
  AND \"Event_Status\".name != 'DRAFT' 
event.getAllPrivateEventsInMonth = \
SELECT \
  \"Event\".id              AS id, \
  \"Event\".name            AS name, \
  start_time, \
  end_time, \
  \"Event\".description     AS description, \
  \"Event_Visibility\".name AS visibility, \
  \"Event_Status\".name     AS status \
FROM (\"Event\" \
  INNER JOIN \"Event_Visibility\" \
    ON \"Event\".visibility = \"Event_Visibility\".id) \
  INNER JOIN \"Event_Status\" \
  ON \"Event\".status = \"Event_Status\".id \
WHERE \"Event\".visibility = (SELECT id \
                            FROM \"Event_Visibility\" \
                            WHERE name = 'PRIVATE') \
  AND \"Event\".creator_id = cast(? AS UUID) \
      AND start_time IS NOT NULL \
      AND end_time IS NOT NULL \
  AND \"Event_Status\".name != 'DELETED' \
  AND \"Event_Status\".name != 'DRAFT' 
event.getAllFriendsEventsInMonth = \
SELECT \
  \"Event\".id              AS id, \
  \"Event\".name            AS name, \
  start_time, \
  end_time, \
  \"Event\".description     AS description, \
  \"Event_Visibility\".name AS visibility, \
  \"Event_Status\".name     AS status \
FROM (\"Event\" \
  INNER JOIN \"Event_Visibility\" \
    ON \"Event\".visibility = \"Event_Visibility\".id) \
  INNER JOIN \"Event_Status\" \
  ON \"Event\".status = \"Event_Status\".id \
WHERE \"Event\".visibility = (SELECT id \
                            FROM \"Event_Visibility\" \
                            WHERE name = 'FRIENDS') \
   AND (\"isFriends\"(creator_id, cast(? AS UUID)) \
           OR creator_id = cast(? AS UUID)) \
      AND start_time IS NOT NULL \
      AND end_time IS NOT NULL \
  AND \"Event_Status\".name != 'DELETED' \
  AND \"Event_Status\".name != 'DRAFT' 
event.getAllByCustId=\
  with one as(SELECT \"Event\".id AS id, \"Event\".name AS name, start_time, end_time, \"Event\".description AS description, \
                 \"Event_Visibility\".name AS visibility, \"Event_Status\".name AS status \
              FROM ((\"Event\" \
                INNER JOIN "Event_Visibility" \
                 ON \"Event\".visibility = "Event_Visibility".id) \
                INNER JOIN \"Event_Status\" \
                 ON \"Event\".status = "Event_Status".id) \
              WHERE creator_id = CAST(? AS UUID) \
                    AND \"Event_Status\".name = 'EVENT') \
  select * from one UNION (SELECT \"Event\".id AS id,\"Event\".name AS name, start_time, end_time, \
                             \"Event\".description AS description, \
                             \"Event_Visibility\".name AS visibility, \"Event_Status\".name AS status \
                           FROM (((\"Event\" \
                             INNER JOIN \"Event_Status\" \
                               ON status = \"Event_Status\".id) \
                             INNER JOIN \"Customer_Event\" \
                               ON \"Event\".id = \"Customer_Event\".event_id) \
                             INNER JOIN \"Event_Visibility\" \
                               ON \"Event\".visibility = \"Event_Visibility\".id) \
                           WHERE \"Event_Status\".name = 'EVENT' \
                                  AND \"Customer_Event\".status = (SELECT id \
                                                                   FROM \"Customer_Event_Status\" \
                                                                   WHERE name = 'ACCEPTED') \
                                  AND \"Customer_Event\".customer_id = CAST(? AS UUID))
event.createChatForEvent =\
INSERT INTO \"Chat\" \
  (id,event_id,withowner) \
  VALUES(uuid_generate_v1(),cast(? as uuid), NULL)
event.timeline=\
select * from timeline(cast(? as uuid), ?, ?)

